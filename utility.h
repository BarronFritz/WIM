#ifndef UTILITY_H
#define UTILITY_H

#include <QDebug>
#include <QString>
#include <QStringList>
#include <QRegExp>
#include <QDate>
#include <QByteArray>
#include <QCryptographicHash>
#include <QSql>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>

namespace regex {
    static inline QRegExp slot() {
        // return QRegExp("^([A-z]+)(\\d{1,2})([A-Ja-j]{1,1})(\\d{1,2})$");
        return QRegExp("([A-Za-z]{0,})(\\d{1,1})([0-9]{2,2})([A-J]{1,1})(\\d{0,1})");
    }
    static inline QRegExp date() {
        return QRegExp("(0?[1-9]|1[012])([-\\/])(0?[1-9]|[12]?[0-9]|3[01])([-\\/])((19|20)?\\d\\d)");
    }
    static inline QRegExp quantity() {
        return QRegExp("[0-9+-/*^]+");
    }
}

QDate string_to_date(const QString &dateString);

QStringList splitRackString(const QString &rs);

namespace security {

struct SecLogin {
    QString username;
    QString passHash;
    QString saltHash;
    int security;
    bool isValid() {
        // Not valid if Username is empty
        // or if salt is empty
        // or if security level is -1;
        return (!username.isEmpty() && !saltHash.isEmpty() && security != -1);
    }

    bool operator!=(const SecLogin &rhs) {
        return !(this->username == rhs.username &&
                this->passHash == rhs.passHash &&
                this->saltHash == rhs.saltHash &&
                this->security == rhs.security);
    }

    bool operator==(const SecLogin &rhs) {
        return (this->username == rhs.username &&
                this->passHash == rhs.passHash &&
                this->saltHash == rhs.saltHash &&
                this->security == rhs.security);
    }
};

QString generateNewSaltHash(const QString &username);

// Returns a Hex encoded password hash generated by adding the saltHash as a QString
QString generateNewPasswordHash(const QString &password, const QString &saltHash);

void insertUserIntoDatabase(QSqlDatabase &db, const QString &username,
                            const QString &password, int securityLevel);

bool passwordMatchesHash(const QString &password, const SecLogin &login);

SecLogin getLoginInformation(QSqlDatabase &db, const QString &username,
                             const QString &password);

void printLoginDetails(const SecLogin &login);

void markUserForPasswordReset(QSqlDatabase &db, const QString &username);

void resetPasswordMarkedForReset(QSqlDatabase &db, const QString &username,
                                 const QString &password);

} // End namespace

#endif // UTILITY_H
